name: Deploy to EC2

on:
  pull_request:
    types: [closed]
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: financial-dashboard
  ECS_SERVICE: financial-dashboard-service
  ECS_CLUSTER: financial-dashboard-cluster
  ECS_TASK_DEFINITION: financial-dashboard-task

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    if: github.event.pull_request.merged == true

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify AWS configuration
      run: |
        echo "Current AWS region: $(aws configure get region)"
        echo "Current IAM user:"
        aws sts get-caller-identity
        echo "Verifying ECS cluster exists..."
        aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Create or update task definition
      run: |
        # Check if task definition exists
        if ! aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} &>/dev/null; then
          echo "Creating new task definition..."
          aws ecs register-task-definition \
            --family ${{ env.ECS_TASK_DEFINITION }} \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu 256 \
            --memory 512 \
            --execution-role-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole \
            --container-definitions "[
              {
                \"name\": \"financial-dashboard\",
                \"image\": \"${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}\",
                \"portMappings\": [
                  {
                    \"containerPort\": 80,
                    \"hostPort\": 80,
                    \"protocol\": \"tcp\"
                  }
                ],
                \"essential\": true
              }
            ]"
        else
          echo "Task definition exists, proceeding with update..."
        fi

    - name: Download task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: financial-dashboard
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

    - name: Create or update ECS service
      run: |
        # Check if service exists
        SERVICE_STATUS=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[0].status' --output text 2>/dev/null || echo "NOT_FOUND")
        
        if [ "$SERVICE_STATUS" = "NOT_FOUND" ]; then
          echo "Creating ECS service..."
          aws ecs create-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_ID }}],securityGroups=[${{ secrets.SECURITY_GROUP_ID }}],assignPublicIp=ENABLED}"
        else
          echo "ECS service exists with status: $SERVICE_STATUS"
        fi

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true 